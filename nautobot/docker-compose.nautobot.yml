---
x-nautobot-base: &nautobot-base
  image: "ghcr.io/abates/nautobot-dev:dynamic-groups-config-contexts"
  #image: "ghcr.io/nautobot/nautobot-dev:${NAUTOBOT_VER}-py${PYTHON_VER}"
  environment:
      - "NAUTOBOT_DB_ENGINE=django.db.backends.postgresql"
  env_file:
    - "./nautobot/nautobot.env"
    - "./nautobot/creds.env"
  volumes:
    - "./nautobot/startup.sh:/opt/nautobot/startup.sh"
    - "./nautobot/bootstrap.sh:/opt/nautobot/bootstrap.sh"
    - "./nautobot/nautobot-entrypoint.sh:/opt/nautobot/nautobot-entrypoint.sh"
    - "./nautobot/nautobot-celery-entrypoint.sh:/opt/nautobot/nautobot-celery-entrypoint.sh"
    - "./nautobot/labpath.sh:/etc/profile.d/labpath.sh"
    - "./nautobot/nautobot_config.py:/opt/nautobot/default_nautobot_config.py"
  tty: true

version: "3.8"
services:
  nautobot:
    entrypoint: /opt/nautobot/nautobot-entrypoint.sh
    command: /opt/nautobot/startup.sh
    ports:
      - "8080"
    depends_on:
      nautobot-redis:
        condition: "service_started"
      nautobot-db:
        condition: "service_healthy"
    healthcheck: 
      interval: 5s
      timeout: 5s
      start_period: 30s
      retries: 3
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health/"]

    <<: *nautobot-base
  nautobot-worker:
    entrypoint: /opt/nautobot/nautobot-celery-entrypoint.sh
    depends_on:
      nautobot:
        condition: "service_healthy"
    healthcheck:
      interval: "30s"
      timeout: "10s"
      start_period: "30s"
      retries: 3
      test: ["CMD", "bash", "-c", "nautobot-server celery inspect ping --destination celery@$$HOSTNAME"]  ## $$ because of docker-compose
    <<: *nautobot-base

  nautobot-redis:
    image: "redis:6-alpine"
    command:
      - "sh"
      - "-c"  # this is to evaluate the $NAUTOBOT_REDIS_PASSWORD from the env
      - "redis-server --appendonly yes --requirepass $$NAUTOBOT_REDIS_PASSWORD"
    env_file:
      - "./nautobot/nautobot.env"
      - "./nautobot/creds.env"

  nautobot-db:
    image: "postgres:13-alpine"
    env_file:
      - "./nautobot/nautobot.env"
      - "./nautobot/creds.env"
    volumes:
      - "postgres_data:/var/lib/postgresql/data"
    healthcheck:
      test: "pg_isready --username=$$POSTGRES_USER --dbname=$$POSTGRES_DB"
      interval: "10s"
      timeout: "5s"
      retries: 10

volumes:
  postgres_data: {}
