#!/usr/bin/env python3

import glob
import itertools
import json
import os
import subprocess
import sys
from importlib import import_module

PROJECT_PREFIX="nautobot_labs_"
COMPOSE_HTTP_TIMEOUT="86400"
NAUTOBOT_VER="1.5"
PYTHON_VER="3.9"

COMMANDS = {}

def command(fn):
    global COMMANDS
    COMMANDS[fn.__name__] = fn
    return fn

def add_command(name):
    def command_fn(lab_name):
        lab = lab_name
        if isinstance(lab, str):
            lab = LabRunner(lab_name)
        return getattr(lab, name)()
    command_fn.__name__ = name
    return command(command_fn)

def service_command(fn):
    def wrapper(lab_name, service_name=None):
        if service_name is None:
            service_name = lab_name
            lab = get_current_lab(exit_on_not_found=True)
        else:
            lab = LabRunner(lab_name)
        return fn(lab, service_name)
    wrapper.__name__ = fn.__name__
    return command(wrapper)

def add_service_command(name):
    def command_fn(lab, service_name):
        return getattr(lab, name)(service_name)

    command_fn.__name__ = name
    return service_command(command_fn)

def event(fn):
    event = fn.__name__
    def wrapper(self, *args, **kwargs):
        self.emit(f"pre_{event}")
        result = fn(self, *args, **kwargs)
        self.emit(f"post_{event}")
        return result
    return wrapper

class LabError(Exception):
    """Any non-recoverable error when operating on a lab."""

def docker_compose(command, lab, run_exec=False, docker_args=[], capture_output=False):
    compose_dir = os.path.dirname(__file__)
    project_name = PROJECT_PREFIX + lab.name
    compose_command = [
            "docker",
            "compose",
            "--project-name",
            project_name,
            "--project-directory",
            compose_dir,
            *itertools.chain(*zip(itertools.repeat("-f"), lab.compose_files)),
            command,
            *docker_args,
    ]

    env = {
        **os.environ,
        "COMPOSE_HTTP_TIMEOUT": COMPOSE_HTTP_TIMEOUT,
        "NAUTOBOT_VER": NAUTOBOT_VER,
        "PYTHON_VER": PYTHON_VER,
    }
    
    if run_exec:
        os.execvpe(compose_command[0], compose_command, env)

    result = subprocess.run(compose_command, env=env, capture_output=capture_output)
    result.check_returncode()
    return result


class LabRunner:
    def __init__(self, name):
        self.component_name = name
        self.components = {}
        self.listeners = {}

        lab, _ = self.get_component(name)
        self.name = getattr(lab, "name", name)
        self.description = getattr(lab, "description", "")

        components = [component for component in getattr(lab, "components", [])]
        while len(components) > 0:
            component, loaded = self.get_component(components.pop(0))
            if loaded and hasattr(component, "components"):
                components.extend(component.components)

    def emit(self, event):
        for component in self.components.values():
            if hasattr(component, event):
                getattr(component, event)()

    def get_component(self, name):
        loaded = False
        if name not in self.components:
            loaded = True
            lab_module = import_module(name)
            if hasattr(lab_module, '__path__') and getattr(lab_module, '__file__', None) is None:
                raise LabError(f"could not load {name} because it has no __init__.py")

            if not hasattr(lab_module, "lab"):
                raise LabError(f"could not load {name} because __init__.py does not define the lab class (missing `lab = LabClass`)")
            self.components[name] = lab_module.lab()

        return self.components[name], loaded

    @property
    def compose_files(self):
        compose_files = []
        for name, component in self.components.items():
            if hasattr(component, "compose_files"):
                compose_files.extend([os.path.join(".", name, compose_file) for compose_file in component.compose_files])
        return compose_files

    @event
    def pull(self):
        print(f"Pulling {self.name} images...", file=sys.stderr)
        docker_compose("pull", self)

    @event
    def start(self):
        print(f"Starting {self.name}...", file=sys.stderr)
        docker_compose("up", self, True)

    @event
    def restart(self, service_name=None):
        args = []
        if service_name:
            args = [service_name]
        docker_compose("restart", self, docker_args=args)

    @event
    def stop(self):
        print(f"Stopping {self.name}...", file=sys.stderr)
        docker_compose("stop", self)

    @event
    def service_details(self, service_name):
        args = [
            "--format",
            "json",
            service_name
        ]
        result = docker_compose("ps", self, docker_args=args, capture_output=True)
        return json.loads(result.stdout)[0]

    @event
    def stop_service(self, service_name):
        docker_compose("stop", self, docker_args=[service_name])

    @event
    def start_service(self, service_name):
        docker_compose("start", self, docker_args=[service_name])

    @event
    def restart_service(self, service_name):
        self.restart(service_name)

    @event
    def ps(self):
        print(f"Services running for {self.name}")
        docker_compose("ps", self)
        print()

    @event
    def destroy(self):
        self.stop()

        print(f"Removing all containers for {self.name}...", file=sys.stderr)
        docker_compose("down", self, docker_args=["--remove-orphans", "--volumes"])

    @event
    def cli(self, service_name):
        docker_args = [
            "-it",
            service_name,
            "/bin/bash"
        ]
        docker_compose("exec", self, docker_args=docker_args, run_exec=True)

    @event
    def browse(self, service_name):
        data = self.service_details(service_name)
        published_port = data["Publishers"][0]["PublishedPort"]
        url = f"http://127.0.0.1:{published_port}/"
        cmd = []
        if sys.platform == "linux" or sys.platform == "linux2":
            cmd = ["xdg-open", url]
        elif sys.platform == "darwin":
            cmd = ["open", url]
        elif sys.platform == "win32":
            cmd = ["start", url]
        os.execvp(cmd[0], cmd)

def get_labs(match_name=None, running=False):
    command = ["docker", "ps"]
    if not running:
        command.append("-a")

    if match_name == "all":
        match_name = None

    command.extend(["--filter", "label=com.docker.compose.project", "-q"])
    container_ids = subprocess.check_output(command).strip().split()

    result = {}
    for container_id in container_ids:
        command = ["docker", "inspect", "--format={{index .Config.Labels \"com.docker.compose.project\"}}", container_id]
        project_name = subprocess.check_output(command, text=True).strip()
        if project_name.startswith(PROJECT_PREFIX):
            lab_name = project_name[len(PROJECT_PREFIX):]
            if lab_name in result:
                continue

            try:
                lab = LabRunner(lab_name)
                if match_name and lab_name == match_name:
                    return [lab]
                result[lab_name] = lab
            except LabError as ex:
                print("WARNING: {ex}", file=sys.stderr)

    return list(result.values())

def get_current_lab(exit_on_not_found=False):
    labs = get_labs(running=True)
    if len(labs) == 1:
        return labs[0]
    elif len(labs) > 1:
        print(f"More than one lab is currently running ({labs}). Please select a specific lab.", file=sys.stderr)
        sys.exit()

    if exit_on_not_found:
        print("No lab is currently running", file=sys.stderr)
        sys.exit()
    return None

@command
def clean(lab_name):
    for lab in get_labs(lab_name):
        lab.destroy()

@command
def ps(lab_name):
    for lab in get_labs(lab_name):
        lab.ps()

add_command("start")
add_command("stop")
add_command("restart")
add_command("destroy")

add_service_command("start_service")
add_service_command("stop_service")
add_service_command("restart_service")
add_service_command("browse")
add_service_command("cli")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        commands = "|".join(COMMANDS.keys())
        print(f"Usage {sys.argv[0]} [{commands}]", file=sys.stderr)
        sys.exit(1)

    cmd = sys.argv[1]
    try:
        lab_name = sys.argv[2].rstrip("/")
    except IndexError:
        if cmd == "start":
            print("Lab name is required", file=sys.stderr)
            sys.exit(1)

        lab_name = get_current_lab(exit_on_not_found=True)

    if cmd in COMMANDS:
        try:
            COMMANDS[cmd](lab_name, *sys.argv[3:])
        except subprocess.CalledProcessError:
            sys.exit(1)
        except LabError as ex:
            print(f"Failed to start lab: {ex}", file=sys.stderr)
            sys.exit(1)
    else:
        print(f"Unknown command {cmd}", file=sys.stderr)
